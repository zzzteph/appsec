<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: yandex/cloud/compute/v1/instance_service.proto

namespace App\Rest\Yandex\Iam;

use Illuminate\Support\Facades\Http;
use Jose\Component\Core\AlgorithmManager;
use Jose\Component\KeyManagement\JWKFactory;
use Jose\Component\Signature\JWSBuilder;
use Jose\Component\Signature\Algorithm\PS256;
use Jose\Component\Signature\Serializer\CompactSerializer;
use App\Models\Iamtoken as IamTokenModel;
use App\Models\Cloud;
use App\Models\CloudConfig;

class IamToken 
{
  
	public function __construct() {

    }

	public function create()
	{
		//todo enable several clouds
		$cloud=Cloud::where('type','yandex')->where('enabled',TRUE)->first();
		if($cloud===null)
		{
			return;
		}
		$service_account_id = $cloud->service_account_id;
		$key_id = $cloud->key_id;
		$algorithmManager = new AlgorithmManager([
			new PS256()
		]);
		$jwsBuilder = new JWSBuilder( $algorithmManager);

		$now = time();


		$payload = json_encode([
					'aud' => 'https://iam.api.cloud.yandex.net/iam/v1/tokens',
					'iss' => $service_account_id,
					'iat' => $now,
					'exp' => $now + 360
		]);
		$header = [
			'alg' => 'PS256',
			'typ' => 'JWT',
			'kid' => $key_id
		];
		//TODO put keys as config
		$key = JWKFactory::createFromKeyFile(base_path().'/keys/private.pem');

		$jws = $jwsBuilder
			->create()
			->withPayload($payload)
			->addSignature($key, $header)
			->build();

		$serializer = new CompactSerializer();
		$token = $serializer->serialize($jws);

		try
		{
			$response = Http::withHeaders([
				'Content-Type' => 'application/son'
			])->timeout(5)->retry(3, 500)->post('https://iam.api.cloud.yandex.net/iam/v1/tokens', [
				'jwt' =>$token,
			]);
			$response=$response->json();
			if(isset($response['iamToken']))
			{
				$iamtoken = IamTokenModel::where('cloud_id',$cloud->id)->first();
				if(is_null($iamtoken))
				{
					$iamtoken = new IamTokenModel;

				}	
					$iamtoken->id = $response['iamToken'];
					$iamtoken->cloud_id=$cloud->id;
					$iamtoken->save();	
			}

		}
		catch(Illuminate\Http\Client\ConnectionException $e)
		{
			
		}



	}


}

